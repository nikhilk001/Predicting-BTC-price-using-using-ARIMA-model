# -*- coding: utf-8 -*-
"""Predicting bitcoin price using ARIMA model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YjLtXHAUyuu1d2gmObTKVBMMe52PuO0d

Predicting bitcoin price using ARIMA model
By: Nikhil Kinikar

Installing Yahoo Finance To get BTC Prices
"""

pip install yfinance

"""Importing Data set"""

#Importing Dataset
import yfinance as yf
df=yf.download('BTC-USD')

#dataset
df

len(df)

df.info()

#describe() function gives descriptive statistics of data set for numeric variable
df.describe()

"""Importing Libraries"""

import numpy as np, pandas as pd, matplotlib.pyplot as plt
import math
from statsmodels.tsa.arima_model import ARIMA
from sklearn.metrics import mean_squared_error, mean_absolute_error

"""Visualising Dataset"""

plt.figure(figsize=(10,6))
plt.grid(True)
plt.xlabel('Year')

plt.plot(df.index, df['Adj Close'])
plt.show()

plt.figure(figsize=(10,6))
plt.grid(True)
plt.xlabel('Year')

plt.plot(df.index, df['Volume'])
plt.show()

"""Train Test Splitting"""

# Train test split 
to_row = int(len(df)*0.9)  #90% of data will be used to train the dataset
training_data = list(df[0:to_row]['Adj Close'])
testing_data = list(df[to_row:]['Adj Close'])

#split data into train and training set
plt.figure(figsize=(10,6))
plt.grid(True)
plt.xlabel('Dates')
plt.ylabel('Closing Prices')
plt.plot (df[0:to_row]['Adj Close'], 'green', label='Train data')
plt.plot(df[to_row:]['Adj Close'], 'blue', label='Test data')
plt.legend()

model_predictions= []
n_test_obser=len(testing_data)

for i in range(n_test_obser):
  model= ARIMA(training_data, order=(4,1,0))
  model_fit = model.fit()
  output = model_fit.forecast()
  yhat=list(output[0])[0]
  model_predictions.append(yhat)
  actual_test_value=testing_data[i]
  training_data.append(actual_test_value)

print('Expected Value of BTC Tomorrow(USD): ',yhat)

print(model_fit.summary())

plt.figure(figsize=(15,9))
plt.grid(True)
date_range = df[to_row:].index
plt.plot (date_range, model_predictions, color = 'blue', marker = 'o', linestyle = 'dashed', label = 'BTC predicted Price')
plt.plot(date_range, testing_data, color = 'red', label = 'BTC Actual Price')
plt.title('Bitcoin Price Prediction')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

# report performance
mape = np.mean(np.abs(np.array(model_predictions) - np.array(testing_data))/np.abs(testing_data))
print('MAPE: '+str(mape)) #Mean Absolute Percentage Error
# Around 2.5% MAPE (Mean Absolute Percentage Error) implies the model is about 97.5 % accurate in predicting the test set observations.

print('Accuracy:',(100-(mape*100)))